 ATASCOS POR DEPENDENCIA DE DATOS: SE PRODUCEN CUANDO SE QUIERE ACCEDER A UN REGISTRO
 QUE NO ESTÁ DISPONIBLE, ES DECIR, NO TERMINO SU ETAPA DE WB. PARA DISMINUIR ESTOS
 ATASCOS, SE USA LA TECNICA DE FORWARDING (ADELANTAMIENTO)
 RAW


 ATASCOS POR DEPENDENCIA DE CONTROL: ESTOS ATASCOS, SON PRODUCIDOS POR LOS SALTOS
 UNA INSTRUCCION DEPENDE DE COMO SE EJECUTE OTRA BTS / BTB / DELAY SLOT


 ATASCOS ESTRUCTURALES: SON PRODUCIDOS POR INSTRUCCIONES DE PUNTO FLOTANTE,
 CUANDO DOS INSTRUCCIONES QUIEREN ACCEDER A LA ETAPA MEM AL MISMO TIEMPO
 TIENE PRIORIDAD LA PRIMERA INSTRUCCION QUE ENTRÓ AL CAUCE


TECNICAS PARA EVITAR ATASCOS RAW:

 FORWARDING: ES UNA TECNICA QUE CONSISTE EN UN ADELANTAMIENTO DE OPERANDOS
 AGREGANDO BUFFERES INTERMEDIOS (UNO ANTES Y UNO DESPUES DE LA ETAPA MEM)


 DELAY SLOT: (SALTO RETARDADO) ESTA TECNICA, EJECUTA SIEMPRE LA INSTRUCCION
 SIGUIENTE A UN SALTO. POR ESO, AL USAR ESTA TECNICA ES RECOMENDABLE PONER
 UNA INSTRUCCION UTIL DESPUES DEL SALTO.


 BTB: ESTA TECNICA, PREDICE MEDIANTE UN FLAG, SI DEBE SALTAR INCONDICIONALMENTE O NO
 ES RECOMENDABLE USARLA CUANDO TENEMOS UN LOOP CON VARIAS ITERACIONES.
 VAMOS A TENER 4 ATASCOS: 2 POR PREDECIR MAL LA PRIMERA VEZ,
 Y OTROS 2 POR PREDECIR MAL LA ULTIMA VEZ.
  SI TENEMOS UN LOOP CON POCAS ITERACIONES NO SERIA OPTIMO USARLO.


 TECNICAS PARA REDUCIR ATASCOS RAW :
 POR SOFTWARE: MEDIANTE REORDENAMIENTO DE CODIGO , O INSTRUCCIONES NOP

 POR HARDWARE: MEDIANTE FORWARDING


 A TENER EN CUENTA:
 LA INSTRUCCION LD ESCRIBE EL REGISTRO EN LA ETAPA WB
 (CUALQUIER INSTRUCCION QUE INTENTE LEER O ESCRIBIR EL MISMO REGISTRO ANTES DE
 LA ETAPA WB, PRODUCIRÁ UN ATASCO DE TIPO RAW )



 LA INSTRUCCION SD LEE EL REGISTRO EN LA ETAPA ID

 EL SALTO SE RESUELVE EN DECODIFICACION

 ECUACION PARA CALCULAR CPI=
  4 + CANT INSTRUCCIONES + CANT ATASCOS TOTALES / CANT INSTRUCCIONES
 ( EL HALT CUENTA COMO INSTRUCCION )

 LD PARA GUARDAR UN ENTERO EN UN REGISTRO
 LBU PARA GUARDAR UN ASCIIZ EN UN REGISTRO


 CUANTAS OPCIONES HAY PARA GENERAR SALIDA EN PANTALLA ALFANUMERICA ?
 RESPUESTA: 4 OPCIONES.
 1)NUMEROS ENTEROS SIN SIGNO 2) ENTEROS CON SIGNO 3) PUNTO FLOTANTE 4) STRING

 CUANTOS CICLOS TARDA LA SIGUIENTE INSTRUCCION? MUL.D F1, F2,F3 (MULTIPLICACION  FLOTANTE)
 RESPUESTA= 7 CICLOS DE MULTIPLICACION + 4 DE DECODIFICACION = 11 CICLOS


 COMO HACER PUSH Y POP EN WINMIPS?
 PRIMERO TENEMOS QUE RESERVAR ESPACIO EN LA PILA, AL PRINCIPIO DEL PROGRAMA
 ESTO SE HACE CON LA INSTRUCCION= DADDI $SP, $ZERO, 0X400

 PARA HACER UN PUSH DE ($RA EJEMPLO ) DEBEMOS HACER: # DADDI $SP, $SP, -8
 SD $RA, 0($SP)

 PARA HACER UN POP DEBEMOS HACER LO MISMO PERO INVERSO:
 LD $RA, 0($SP)
 DADDI $SP, $SP, 8

 PARA VECTOR DE NUMEROS USAMOS LD PARA GUARDAR EN UN REGISTRO Y 8 DE DESPLAZAMIENTO
 PARA AVANZAR A LA SIGUIENTE POSICION

 PARA VECTOR DE ASCIIZ O CARACTERES USAMOS LBU PARA GUARDAR EN UN REGISTRO
 Y 1 DE DESPLAZAMIENTO PARA AVANZAR A LA SIGUIENTE POSICION.



 CUANTOS CICLOS TARDAN LAS OPERACIONES EN PUNTO FLOTANTE ?
 SUMA = 4 CICLOS
 MULTIPLICACION = 7 CICLOS
 DIVISION = 24 CICLOS

 Etapas del pipeline de MIPS
Las instrucciones en MIPS en general llevan cinco pasos:

LA ETAPA IF = TRAE LA INSTRUCCION DE LA MEMORIA
LA ETAPA ID = DECODIFICA LA INSTRUCCION Y LEE EL ARCHIVO DE REGISTROS
LA ETAPA EX = EJECUTA UNA OPERACION EN LA ALU
LA ETAPA MEM= ACCEDE A LA MEMORIA DE DATOS PARA LEER O ESCRIBIR
LA ETAPA WB = ESCRIBE EL RESULTADO DE UNA OPERACION EN EL ARCHIVO DE REGISTROS
